{"version":3,"sources":["index.ts"],"names":["defaultError","e","success","code","message","data","catchErrorMessage","postLoginOTP","params","response","EventRegister","emitEvent","ON_ERROR","postLogin"],"mappings":";;;;;;;;AAGA;;AACA;;;;AAJA;AAMA,MAAMA,YAAY,GAAIC,CAAD,KAAiC;AACpDC,EAAAA,OAAO,EAAE,KAD2C;AAEpDC,EAAAA,IAAI,EAAE,SAF8C;AAGpDC,EAAAA,OAAO,qDAA8CH,CAA9C,CAH6C;AAIpDI,EAAAA,IAAI,EAAE;AAJ8C,CAAjC,CAArB;;AAOA,MAAMC,iBAAiB,GAAIL,CAAD,IAAY;AACpC,SAAO,CAAAA,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAEG,OAAH,KAAcH,CAArB;AACD,CAFD;;AAIO,eAAeM,YAAf,CACLC,MADK,EAEuC;AAC5C,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAM,kBACrB,0BADqB,EAErBD,MAFqB,CAAvB;AAKA,WAAO,EAAC,GAAGC;AAAJ,KAAP;AACD,GAPD,CAOE,OAAOR,CAAP,EAAU;AACVS,gCAAcC,SAAd,CAAwBC,sBAAxB,EAAkCN,iBAAiB,CAACL,CAAD,CAAnD;;AACA,WAAOD,YAAY,CAACM,iBAAiB,CAACL,CAAD,CAAlB,CAAnB;AACD;AACF;;AAEM,eAAeY,SAAf,CACLL,MADK,EAEoC;AACzC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAM,kBACrB,cADqB,EAErBD,MAFqB,CAAvB;AAKA,WAAO,EAAC,GAAGC;AAAJ,KAAP;AACD,GAPD,CAOE,OAAOR,CAAP,EAAU;AACVS,gCAAcC,SAAd,CAAwBC,sBAAxB,EAAkCN,iBAAiB,CAACL,CAAD,CAAnD;;AACA,WAAOD,YAAY,CAAEM,iBAAiB,CAACL,CAAD,CAAnB,CAAnB;AACD;AACF","sourcesContent":["/* eslint-disable prettier/prettier */\nimport {LoginOTPRequest, LoginResponse, LoginRequest, LoginOTPResponse} from '../models/models.interface';\nimport {NetworkResponse} from './network.interface';\nimport xhr from './xhr';\nimport {EventRegister, ON_ERROR} from '../core/eventManager';\n\nconst defaultError = (e: string): NetworkResponse => ({\n  success: false,\n  code: 'FAILURE',\n  message: `Something wrong while requesting network ${e}`,\n  data: null\n});\n\nconst catchErrorMessage = (e: any) => {\n  return e?.message || e;\n};\n\nexport async function postLoginOTP(\n  params: LoginOTPRequest\n): Promise<NetworkResponse<LoginOTPResponse>> {\n  try {\n    const response = await xhr<LoginOTPRequest, LoginOTPResponse>(\n      '/users/login/request-otp',\n      params\n    );\n\n    return {...response};\n  } catch (e) {\n    EventRegister.emitEvent(ON_ERROR, catchErrorMessage(e));\n    return defaultError(catchErrorMessage(e));\n  }\n}\n\nexport async function postLogin(\n  params: LoginRequest\n): Promise<NetworkResponse<LoginResponse>> {\n  try {\n    const response = await xhr<LoginRequest, LoginResponse>(\n      '/users/login',\n      params\n    );\n\n    return {...response};\n  } catch (e) {\n    EventRegister.emitEvent(ON_ERROR, catchErrorMessage(e));\n    return defaultError((catchErrorMessage(e)));\n  }\n}\n"]}