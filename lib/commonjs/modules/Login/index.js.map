{"version":3,"sources":["index.tsx"],"names":["Login","loginVisible","clearState","resetReducer","Context","handleOnCancel","EventRegister","emitEvent","ON_CANCEL","Platform","OS","colors","white","styles","modal","container","content"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,SAASA,KAAT,GAA8B;AAC5B,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA;AAHI,MAIF,uBAAWC,gBAAX,CAJJ;;AAMA,QAAMC,cAAc,GAAG,MAAM;AAC3BC,gCAAcC,SAAd,CAAwBC,uBAAxB,EAAmC,IAAnC;;AACAL,IAAAA,YAAY;AACZD,IAAAA,UAAU;AACX,GAJD;;AAMA,sBACE,yEACE,6BAAC,yBAAD;AACE,IAAA,iBAAiB,EAAE,GADrB;AAEE,IAAA,kBAAkB,EAAE,GAFtB;AAGE,IAAA,YAAY,EAAC,SAHf;AAIE,IAAA,WAAW,EAAEO,sBAASC,EAAT,KAAgB,KAAhB,GAAwB,cAAxB,GAAyC,WAJxD;AAKE,IAAA,cAAc,EAAE,IALlB;AAME,IAAA,cAAc,EAAE,GANlB;AAOE,IAAA,cAAc,EAAE,CAAC,OAAD,CAPlB;AAQE,IAAA,eAAe,EAAEL,cARnB;AASE,IAAA,SAAS,EAAEJ,YATb;AAUE,IAAA,iBAAiB,EAAEI,cAVrB;AAWE,IAAA,eAAe,EAAE,CAXnB;AAYE,IAAA,aAAa,EAAEM,eAAOC,KAZxB;AAaE,IAAA,KAAK,EAAEC,gBAAOC,KAbhB;AAcE,IAAA,WAAW,EAAE;AAdf,kBAeE,6BAAC,uBAAD;AAAY,IAAA,4BAA4B,EAAE,KAA1C;AAAiD,IAAA,yBAAyB,EAAC;AAA3E,kBACE,6BAAC,sBAAD;AAAW,IAAA,QAAQ,EAAC;AAApB,IADF,eAEE,6BAAC,eAAD,OAFF,eAGE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAED,gBAAOE;AAApB,kBACE,6BAAC,aAAD,OADF,eAEE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEF,gBAAOG;AAApB,kBACE,6BAAC,oBAAD,OADF,eAEE,6BAAC,aAAD,OAFF,eAGE,6BAAC,yBAAD,OAHF,CAFF,CAHF,CAfF,eA2BE,6BAAC,YAAD,OA3BF,CADF,CADF;AAiCD;;eAEchB,K","sourcesContent":["import React, {useContext} from 'react';\nimport {View, ScrollView, Platform, StatusBar} from 'react-native';\nimport Modal from 'react-native-modal';\nimport OTP from '../OTP';\nimport Header from '../Header';\nimport Logo from './Logo';\nimport Description from './Description';\nimport TermsDescription from './TermsDescription';\nimport styles from './styles';\nimport {colors} from '../../themes';\nimport Form from './Form';\nimport {Context} from '../../core/Context';\nimport {EventRegister, ON_CANCEL} from '../../core/eventManager';\n\nfunction Login(): JSX.Element {\n  const {\n    loginVisible,\n    clearState,\n    resetReducer\n  } = useContext(Context);\n\n  const handleOnCancel = () => {\n    EventRegister.emitEvent(ON_CANCEL, true);\n    resetReducer();\n    clearState();\n  };\n\n  return (\n    <>\n      <Modal\n        animationInTiming={200}\n        animationOutTiming={200}\n        animationOut=\"fadeOut\"\n        animationIn={Platform.OS === 'ios' ? 'slideInRight' : 'slideInUp'}\n        propagateSwipe={true}\n        swipeThreshold={200}\n        swipeDirection={['right']}\n        onSwipeComplete={handleOnCancel}\n        isVisible={loginVisible}\n        onBackButtonPress={handleOnCancel}\n        backdropOpacity={1}\n        backdropColor={colors.white}\n        style={styles.modal}\n        coverScreen={true}>\n        <ScrollView showsVerticalScrollIndicator={false} keyboardShouldPersistTaps=\"handled\">\n          <StatusBar barStyle=\"dark-content\" />\n          <Header />\n          <View style={styles.container}>\n            <Logo />\n            <View style={styles.content}>\n              <Description />\n              <Form />\n              <TermsDescription />\n            </View>\n          </View>\n        </ScrollView>\n        <OTP />\n      </Modal>\n    </>\n  );\n}\n\nexport default Login;\n"]}