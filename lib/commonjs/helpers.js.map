{"version":3,"sources":["helpers.ts"],"names":["countries","require","checkClient","options","clientId","length","clientSecret","Error","getDialCode","countryCode","dialCode","getCountry","formatPhoneInternational","numberProto","country_code","national_number","PNF","PhoneNumberFormat","phoneNumberLib","phoneUtil","PhoneNumberUtil","getInstance","number","parseAndKeepRawInput","format","INTERNATIONAL","replace","height","width","Dimensions","get","standardLength","offset","Platform","OS","StatusBar","currentHeight","deviceHeight","RFPercentage","percent","heightPercent","Math","round","RFValue","fontSize","standardScreenHeight","otpTimerFormat","duration","hrs","mins","secs","ret"],"mappings":"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","sourcesContent":["import { Platform, StatusBar, Dimensions } from 'react-native';\nimport options from './core/options';\nimport {Countries, FlagType} from './modules/Login/Login.interface';\nimport {isIphoneX} from 'react-native-iphone-x-helper';\n\nconst countries: Countries = require('../assets/json/countries.json');\n\nexport function checkClient() {\n  if (\n    options.clientId === null ||\n    !options.clientId?.length ||\n    options.clientSecret === null ||\n    !options.clientSecret?.length\n  ) {\n    throw new Error(\n      'ClientId and ClientSecret must filled! get the appId and appSecret by dropping us an email developers@human-id.org.'\n    );\n  }\n}\n\nexport function getDialCode(countryCode: FlagType) {\n  return countries[countryCode]?.dialCode;\n}\n\nexport function getCountry(countryCode: FlagType) {\n  return countries[countryCode];\n}\n\nexport function formatPhoneInternational(\n  numberProto: { country_code: string, national_number: string }\n): string | null {\n  if (!numberProto?.country_code || !numberProto?.national_number) return null;\n\n  const {country_code, national_number} = numberProto;\n\n  const PNF = require('google-libphonenumber').PhoneNumberFormat;\n  const phoneNumberLib = require('google-libphonenumber');\n  const phoneUtil = phoneNumberLib.PhoneNumberUtil.getInstance();\n\n  const number = phoneUtil.parseAndKeepRawInput(national_number, country_code);\n\n\n  /**\n   * E164: 0,\n   * INTERNATIONAL: 1,\n   * NATIONAL: 2,\n   * RFC3966: 3\n   */\n  return phoneUtil.format(number, PNF.INTERNATIONAL).replace(/-/g, ' ');\n}\n\nconst { height, width } = Dimensions.get('window');\nconst standardLength = width > height ? width : height;\n\nconst offset =\n  width > height ? 0 : Platform.OS === 'ios' ? 78 : StatusBar.currentHeight; // iPhone X style SafeAreaView size in portrait\n\nconst deviceHeight =\n  Platform.OS === 'android' || isIphoneX()\n    ? standardLength - offset!\n    : standardLength;\n\nexport function RFPercentage(percent: number) {\n  const heightPercent = (percent * deviceHeight) / 100;\n  return Math.round(heightPercent);\n}\n\n// guideline height for standard 5\" device screen is 680\nexport function RFValue(fontSize: number, standardScreenHeight = 720) {\n  const heightPercent = (fontSize * deviceHeight) / standardScreenHeight;\n  return Math.round(heightPercent);\n}\n\nexport function otpTimerFormat(duration: number) {\n  // Hours, minutes and seconds\n  let hrs = ~~(duration / 3600);\n  let mins = ~~((duration % 3600) / 60);\n  let secs = ~~duration % 60;\n\n  // Output like \"1:01\" or \"4:03:59\" or \"123:03:59\"\n  let ret = \"\";\n\n  if (hrs > 0) {\n    ret += \"\" + hrs + \":\" + (mins < 10 ? \"0\" : \"\");\n  }\n\n  ret += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n  ret += \"\" + secs;\n\n  return ret;\n}\n"]}