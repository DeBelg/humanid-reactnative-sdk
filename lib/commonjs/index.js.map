{"version":3,"sources":["index.ts"],"names":["configureHumanID","params","clientId","clientSecret","options","logIn","ref","onCancel","callback","EventRegister","addEventListener","ON_CANCEL","cancel","onSuccess","ON_SUCCESS","exchangeToken","setTimeout","Toast","show","onError","ON_ERROR","error","unsubscribeAllEventListener","removeAllListeners"],"mappings":";;;;;;;;;;;;;AAQA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,gBAAmC,GAAIC,MAAD,IAAY;AACtD,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAA2BF,MAAjC;AAEAG,mBAAQF,QAAR,GAAmBA,QAAnB;AACAE,mBAAQD,YAAR,GAAuBA,YAAvB;AACD,CALD;;;;AAOA,MAAME,KAAa,GAAG,MAAM;AAAA;;AAC1B,4CAAgBC,GAAhB,8EAAqBD,KAArB;AACD,CAFD;;;;AAIA,MAAME,QAAmB,GAAIC,QAAD,IAAc;AACxCC,8BAAcC,gBAAd,CAA+BC,uBAA/B,EAA2CC,MAAD,IAAqB;AAC7D,QAAIA,MAAJ,EAAY;AACVJ,MAAAA,QAAQ;AACT;AACF,GAJD;AAKD,CAND;;;;AAQA,MAAMK,SAAqB,GAAIL,QAAD,IAAc;AAC1CC,8BAAcC,gBAAd,CAA+BI,wBAA/B,EAA4CC,aAAD,IAA2B;AACpE,QAAIA,aAAJ,EAAmB;AACjBC,MAAAA,UAAU,CAAC,MAAM;AACfC,uBAAMC,IAAN,CAAW,oEAAX,EAAiF,IAAjF;AACD,OAFS,EAEP,GAFO,CAAV;AAGAV,MAAAA,QAAQ,CAACO,aAAD,CAAR;AACD;AACF,GAPD;AAQD,CATD;;;;AAWA,MAAMI,OAAiB,GAAIX,QAAD,IAAc;AACtCC,8BAAcC,gBAAd,CAA+BU,sBAA/B,EAA0CC,KAAD,IAAmB;AAC1D,QAAIA,KAAJ,EAAW;AACTL,MAAAA,UAAU,CAAC,MAAM;AACfC,uBAAMC,IAAN,CAAWG,KAAX,EAAkB,IAAlB;AACD,OAFS,EAEP,GAFO,CAAV;AAGAb,MAAAA,QAAQ;AACT;AACF,GAPD;AAQD,CATD;;;;AAWA,MAAMc,2BAAyD,GAAG,MAAM;AACtEb,8BAAcc,kBAAd;AACD,CAFD","sourcesContent":["import {\n  IConfigureHumanID,\n  ILogIn,\n  IOnCancel,\n  IOnError,\n  IOnSuccess,\n  IUnsubscribeAllEventListener\n} from './core/core.interface';\nimport {EventRegister, ON_CANCEL, ON_ERROR, ON_SUCCESS} from './core/eventManager';\nimport options from './core/options';\nimport HumanIDProvider from './core/Provider';\nimport Toast from './modules/Toast'\n\nconst configureHumanID: IConfigureHumanID = (params) => {\n  const {clientId, clientSecret} = params;\n\n  options.clientId = clientId;\n  options.clientSecret = clientSecret;\n};\n\nconst logIn: ILogIn = () => {\n  HumanIDProvider.ref?.logIn();\n};\n\nconst onCancel: IOnCancel = (callback) => {\n  EventRegister.addEventListener(ON_CANCEL, (cancel: boolean) => {\n    if (cancel) {\n      callback();\n    }\n  });\n};\n\nconst onSuccess: IOnSuccess = (callback) => {\n  EventRegister.addEventListener(ON_SUCCESS, (exchangeToken: string) => {\n    if (exchangeToken) {\n      setTimeout(() => {\n        Toast.show('Youâ€™ve successfully logged in. Your data has been securely erased.', 6000);\n      }, 500);\n      callback(exchangeToken);\n    }\n  });\n};\n\nconst onError: IOnError = (callback) => {\n  EventRegister.addEventListener(ON_ERROR, (error: string) => {\n    if (error) {\n      setTimeout(() => {\n        Toast.show(error, 4000);\n      }, 500)\n      callback();\n    }\n  });\n};\n\nconst unsubscribeAllEventListener: IUnsubscribeAllEventListener = () => {\n  EventRegister.removeAllListeners();\n};\n\nexport {\n  configureHumanID,\n  logIn,\n  onError,\n  onSuccess,\n  onCancel,\n  unsubscribeAllEventListener,\n  HumanIDProvider\n};\n"]}