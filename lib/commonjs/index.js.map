{"version":3,"sources":["index.ts"],"names":["configureHumanID","params","appName","clientId","clientSecret","Icon","options","logIn","ref","onCancel","callback","EventRegister","addEventListener","ON_CANCEL","cancel","onSuccess","ON_SUCCESS","exchangeToken","onError","ON_ERROR","message"],"mappings":";;;;;;;;;;;;;AAOA;;AACA;;AACA;;;;AAEA,MAAMA,gBAAmC,GAAIC,MAAD,IAAY;AACtD,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA,YAApB;AAAkCC,IAAAA,IAAI,GAAG;AAAzC,MAAiDJ,MAAvD;AAEAK,mBAAQJ,OAAR,GAAkBA,OAAlB;AACAI,mBAAQH,QAAR,GAAmBA,QAAnB;AACAG,mBAAQF,YAAR,GAAuBA,YAAvB;AACAE,mBAAQD,IAAR,GAAeA,IAAf;AACD,CAPD;;;;AASA,MAAME,KAAa,GAAG,MAAM;AAAA;;AAC1B,4CAAgBC,GAAhB,8EAAqBD,KAArB;AACD,CAFD;;;;AAIA,MAAME,QAAmB,GAAIC,QAAD,IAAc;AACxCC,8BAAcC,gBAAd,CAA+BC,uBAA/B,EAA2CC,MAAD,IAAqB;AAC7D,QAAIA,MAAJ,EAAY;AACVJ,MAAAA,QAAQ;AACT;AACF,GAJD;AAKD,CAND;;;;AAQA,MAAMK,SAAqB,GAAIL,QAAD,IAAc;AAC1CC,8BAAcC,gBAAd,CAA+BI,wBAA/B,EAA4CC,aAAD,IAA2B;AACpE,QAAIA,aAAJ,EAAmB;AACjBP,MAAAA,QAAQ,CAACO,aAAD,CAAR;AACD;AACF,GAJD;AAKD,CAND;;;;AAQA,MAAMC,OAAiB,GAAIR,QAAD,IAAc;AACtCC,8BAAcC,gBAAd,CAA+BO,sBAA/B,EAA0CC,OAAD,IAAqB;AAC5D,QAAIA,OAAJ,EAAa;AACXV,MAAAA,QAAQ,CAACU,OAAD,CAAR;AACD;AACF,GAJD;AAKD,CAND","sourcesContent":["import {\n  IConfigureHumanID,\n  ILogIn,\n  IOnCancel,\n  IOnError,\n  IOnSuccess\n} from './core/core.interface';\nimport {EventRegister, ON_CANCEL, ON_ERROR, ON_SUCCESS} from './core/eventManager';\nimport options from './core/options';\nimport HumanIDProvider from './core/Provider';\n\nconst configureHumanID: IConfigureHumanID = (params) => {\n  const {appName, clientId, clientSecret, Icon = null} = params;\n\n  options.appName = appName;\n  options.clientId = clientId;\n  options.clientSecret = clientSecret;\n  options.Icon = Icon;\n};\n\nconst logIn: ILogIn = () => {\n  HumanIDProvider.ref?.logIn();\n};\n\nconst onCancel: IOnCancel = (callback) => {\n  EventRegister.addEventListener(ON_CANCEL, (cancel: boolean) => {\n    if (cancel) {\n      callback();\n    }\n  });\n};\n\nconst onSuccess: IOnSuccess = (callback) => {\n  EventRegister.addEventListener(ON_SUCCESS, (exchangeToken: string) => {\n    if (exchangeToken) {\n      callback(exchangeToken);\n    }\n  });\n};\n\nconst onError: IOnError = (callback) => {\n  EventRegister.addEventListener(ON_ERROR, (message: string) => {\n    if (message) {\n      callback(message);\n    }\n  });\n};\n\nexport {\n  configureHumanID,\n  logIn,\n  onError,\n  onSuccess,\n  onCancel,\n  HumanIDProvider\n};\n"]}