{"version":3,"sources":["helpers.ts"],"names":["Platform","StatusBar","Dimensions","options","isIphoneX","countries","require","checkClient","clientId","length","clientSecret","Error","appName","Icon","getDialCode","countryCode","dialCode","getCountry","height","width","get","standardLength","offset","OS","currentHeight","deviceHeight","RFPercentage","percent","heightPercent","Math","round","RFValue","fontSize","standardScreenHeight"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,cAAhD;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,SAAQC,SAAR,QAAwB,8BAAxB;;AAEA,MAAMC,SAAoB,GAAGC,OAAO,CAAC,+BAAD,CAApC;;AAEA,OAAO,SAASC,WAAT,GAAuB;AAAA;;AAC5B,MACEJ,OAAO,CAACK,QAAR,KAAqB,IAArB,IACA,uBAACL,OAAO,CAACK,QAAT,8CAAC,kBAAkBC,MAAnB,CADA,IAEAN,OAAO,CAACO,YAAR,KAAyB,IAFzB,IAGA,2BAACP,OAAO,CAACO,YAAT,kDAAC,sBAAsBD,MAAvB,CAJF,EAKE;AACA,UAAM,IAAIE,KAAJ,CACJ,qHADI,CAAN;AAGD,GATD,MASO,IAAIR,OAAO,CAACS,OAAR,KAAoB,IAApB,IAA4B,sBAACT,OAAO,CAACS,OAAT,6CAAC,iBAAiBH,MAAlB,CAAhC,EAA0D;AAC/D,UAAM,IAAIE,KAAJ,CAAU,uEAAV,CAAN;AACD,GAFM,MAEA,IAAIR,OAAO,CAACU,IAAR,KAAiB,IAArB,EAA2B;AAChC,UAAM,IAAIF,KAAJ,CAAU,uEAAV,CAAN;AACD;AACF;AAED,OAAO,SAASG,WAAT,CAAqBC,WAArB,EAA4C;AAAA;;AACjD,kCAAOV,SAAS,CAACU,WAAD,CAAhB,0DAAO,sBAAwBC,QAA/B;AACD;AAED,OAAO,SAASC,UAAT,CAAoBF,WAApB,EAA2C;AAChD,SAAOV,SAAS,CAACU,WAAD,CAAhB;AACD;AAED,MAAM;AAAEG,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAAoBjB,UAAU,CAACkB,GAAX,CAAe,QAAf,CAA1B;AACA,MAAMC,cAAc,GAAGF,KAAK,GAAGD,MAAR,GAAiBC,KAAjB,GAAyBD,MAAhD;AAEA,MAAMI,MAAM,GACVH,KAAK,GAAGD,MAAR,GAAiB,CAAjB,GAAqBlB,QAAQ,CAACuB,EAAT,KAAgB,KAAhB,GAAwB,EAAxB,GAA6BtB,SAAS,CAACuB,aAD9D,C,CAC6E;;AAE7E,MAAMC,YAAY,GAChBzB,QAAQ,CAACuB,EAAT,KAAgB,SAAhB,IAA6BnB,SAAS,EAAtC,GACIiB,cAAc,GAAGC,MADrB,GAEID,cAHN;AAKA,OAAO,SAASK,YAAT,CAAsBC,OAAtB,EAAuC;AAC5C,QAAMC,aAAa,GAAID,OAAO,GAAGF,YAAX,GAA2B,GAAjD;AACA,SAAOI,IAAI,CAACC,KAAL,CAAWF,aAAX,CAAP;AACD,C,CAED;;AACA,OAAO,SAASG,OAAT,CAAiBC,QAAjB,EAAmCC,oBAAoB,GAAG,GAA1D,EAA+D;AACpE,QAAML,aAAa,GAAII,QAAQ,GAAGP,YAAZ,GAA4BQ,oBAAlD;AACA,SAAOJ,IAAI,CAACC,KAAL,CAAWF,aAAX,CAAP;AACD","sourcesContent":["import { Platform, StatusBar, Dimensions } from 'react-native';\nimport options from './core/options';\nimport {Countries, FlagType} from './modules/Login/Login.interface';\nimport {isIphoneX} from 'react-native-iphone-x-helper';\n\nconst countries: Countries = require('../assets/json/countries.json');\n\nexport function checkClient() {\n  if (\n    options.clientId === null ||\n    !options.clientId?.length ||\n    options.clientSecret === null ||\n    !options.clientSecret?.length\n  ) {\n    throw new Error(\n      'ClientId and ClientSecret must filled! get the appId and appSecret by dropping us an email developers@human-id.org.'\n    );\n  } else if (options.appName === null || !options.appName?.length) {\n    throw new Error('HumanID need your application name, please fill your application name');\n  } else if (options.Icon === null) {\n    throw new Error('HumanID need your application logo, please fill your application logo');\n  }\n}\n\nexport function getDialCode(countryCode: FlagType) {\n  return countries[countryCode]?.dialCode;\n}\n\nexport function getCountry(countryCode: FlagType) {\n  return countries[countryCode];\n}\n\nconst { height, width } = Dimensions.get('window');\nconst standardLength = width > height ? width : height;\n\nconst offset =\n  width > height ? 0 : Platform.OS === 'ios' ? 78 : StatusBar.currentHeight; // iPhone X style SafeAreaView size in portrait\n\nconst deviceHeight =\n  Platform.OS === 'android' || isIphoneX()\n    ? standardLength - offset!\n    : standardLength;\n\nexport function RFPercentage(percent: number) {\n  const heightPercent = (percent * deviceHeight) / 100;\n  return Math.round(heightPercent);\n}\n\n// guideline height for standard 5\" device screen is 680\nexport function RFValue(fontSize: number, standardScreenHeight = 720) {\n  const heightPercent = (fontSize * deviceHeight) / standardScreenHeight;\n  return Math.round(heightPercent);\n}\n"]}