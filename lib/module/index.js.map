{"version":3,"sources":["index.ts"],"names":["EventRegister","ON_CANCEL","ON_ERROR","ON_SUCCESS","options","HumanIDProvider","Toast","configureHumanID","params","clientId","clientSecret","logIn","ref","onCancel","callback","addEventListener","cancel","onSuccess","exchangeToken","setTimeout","show","onError","error","unsubscribeAllEventListener","removeAllListeners"],"mappings":"AAQA,SAAQA,aAAR,EAAuBC,SAAvB,EAAkCC,QAAlC,EAA4CC,UAA5C,QAA6D,qBAA7D;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,eAAP,MAA4B,iBAA5B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;AAEA,MAAMC,gBAAmC,GAAIC,MAAD,IAAY;AACtD,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAA2BF,MAAjC;AAEAJ,EAAAA,OAAO,CAACK,QAAR,GAAmBA,QAAnB;AACAL,EAAAA,OAAO,CAACM,YAAR,GAAuBA,YAAvB;AACD,CALD;;AAOA,MAAMC,KAAa,GAAG,MAAM;AAAA;;AAC1B,0BAAAN,eAAe,CAACO,GAAhB,8EAAqBD,KAArB;AACD,CAFD;;AAIA,MAAME,QAAmB,GAAIC,QAAD,IAAc;AACxCd,EAAAA,aAAa,CAACe,gBAAd,CAA+Bd,SAA/B,EAA2Ce,MAAD,IAAqB;AAC7D,QAAIA,MAAJ,EAAY;AACVF,MAAAA,QAAQ;AACT;AACF,GAJD;AAKD,CAND;;AAQA,MAAMG,SAAqB,GAAIH,QAAD,IAAc;AAC1Cd,EAAAA,aAAa,CAACe,gBAAd,CAA+BZ,UAA/B,EAA4Ce,aAAD,IAA2B;AACpE,QAAIA,aAAJ,EAAmB;AACjBC,MAAAA,UAAU,CAAC,MAAM;AACfb,QAAAA,KAAK,CAACc,IAAN,CAAW,oEAAX,EAAiF,IAAjF;AACD,OAFS,EAEP,GAFO,CAAV;AAGAN,MAAAA,QAAQ,CAACI,aAAD,CAAR;AACD;AACF,GAPD;AAQD,CATD;;AAWA,MAAMG,OAAiB,GAAIP,QAAD,IAAc;AACtCd,EAAAA,aAAa,CAACe,gBAAd,CAA+Bb,QAA/B,EAA0CoB,KAAD,IAAmB;AAC1D,QAAIA,KAAJ,EAAW;AACTH,MAAAA,UAAU,CAAC,MAAM;AACfb,QAAAA,KAAK,CAACc,IAAN,CAAWE,KAAX,EAAkB,IAAlB;AACD,OAFS,EAEP,GAFO,CAAV;AAGAR,MAAAA,QAAQ;AACT;AACF,GAPD;AAQD,CATD;;AAWA,MAAMS,2BAAyD,GAAG,MAAM;AACtEvB,EAAAA,aAAa,CAACwB,kBAAd;AACD,CAFD;;AAIA,SACEjB,gBADF,EAEEI,KAFF,EAGEU,OAHF,EAIEJ,SAJF,EAKEJ,QALF,EAMEU,2BANF,EAOElB,eAPF","sourcesContent":["import {\n  IConfigureHumanID,\n  ILogIn,\n  IOnCancel,\n  IOnError,\n  IOnSuccess,\n  IUnsubscribeAllEventListener\n} from './core/core.interface';\nimport {EventRegister, ON_CANCEL, ON_ERROR, ON_SUCCESS} from './core/eventManager';\nimport options from './core/options';\nimport HumanIDProvider from './core/Provider';\nimport Toast from './modules/Toast'\n\nconst configureHumanID: IConfigureHumanID = (params) => {\n  const {clientId, clientSecret} = params;\n\n  options.clientId = clientId;\n  options.clientSecret = clientSecret;\n};\n\nconst logIn: ILogIn = () => {\n  HumanIDProvider.ref?.logIn();\n};\n\nconst onCancel: IOnCancel = (callback) => {\n  EventRegister.addEventListener(ON_CANCEL, (cancel: boolean) => {\n    if (cancel) {\n      callback();\n    }\n  });\n};\n\nconst onSuccess: IOnSuccess = (callback) => {\n  EventRegister.addEventListener(ON_SUCCESS, (exchangeToken: string) => {\n    if (exchangeToken) {\n      setTimeout(() => {\n        Toast.show('Youâ€™ve successfully logged in. Your data has been securely erased.', 6000);\n      }, 500);\n      callback(exchangeToken);\n    }\n  });\n};\n\nconst onError: IOnError = (callback) => {\n  EventRegister.addEventListener(ON_ERROR, (error: string) => {\n    if (error) {\n      setTimeout(() => {\n        Toast.show(error, 4000);\n      }, 500)\n      callback();\n    }\n  });\n};\n\nconst unsubscribeAllEventListener: IUnsubscribeAllEventListener = () => {\n  EventRegister.removeAllListeners();\n};\n\nexport {\n  configureHumanID,\n  logIn,\n  onError,\n  onSuccess,\n  onCancel,\n  unsubscribeAllEventListener,\n  HumanIDProvider\n};\n"]}