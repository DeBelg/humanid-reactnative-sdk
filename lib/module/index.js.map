{"version":3,"sources":["index.ts"],"names":["EventRegister","ON_CANCEL","ON_ERROR","ON_SUCCESS","options","HumanIDProvider","configureHumanID","params","appName","clientId","clientSecret","Icon","logIn","ref","onCancel","callback","addEventListener","cancel","onSuccess","exchangeToken","onError","message"],"mappings":"AAOA,SAAQA,aAAR,EAAuBC,SAAvB,EAAkCC,QAAlC,EAA4CC,UAA5C,QAA6D,qBAA7D;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,eAAP,MAA4B,iBAA5B;;AAEA,MAAMC,gBAAmC,GAAIC,MAAD,IAAY;AACtD,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA,YAApB;AAAkCC,IAAAA,IAAI,GAAG;AAAzC,MAAiDJ,MAAvD;AAEAH,EAAAA,OAAO,CAACI,OAAR,GAAkBA,OAAlB;AACAJ,EAAAA,OAAO,CAACK,QAAR,GAAmBA,QAAnB;AACAL,EAAAA,OAAO,CAACM,YAAR,GAAuBA,YAAvB;AACAN,EAAAA,OAAO,CAACO,IAAR,GAAeA,IAAf;AACD,CAPD;;AASA,MAAMC,KAAa,GAAG,MAAM;AAAA;;AAC1B,0BAAAP,eAAe,CAACQ,GAAhB,8EAAqBD,KAArB;AACD,CAFD;;AAIA,MAAME,QAAmB,GAAIC,QAAD,IAAc;AACxCf,EAAAA,aAAa,CAACgB,gBAAd,CAA+Bf,SAA/B,EAA2CgB,MAAD,IAAqB;AAC7D,QAAIA,MAAJ,EAAY;AACVF,MAAAA,QAAQ;AACT;AACF,GAJD;AAKD,CAND;;AAQA,MAAMG,SAAqB,GAAIH,QAAD,IAAc;AAC1Cf,EAAAA,aAAa,CAACgB,gBAAd,CAA+Bb,UAA/B,EAA4CgB,aAAD,IAA2B;AACpE,QAAIA,aAAJ,EAAmB;AACjBJ,MAAAA,QAAQ,CAACI,aAAD,CAAR;AACD;AACF,GAJD;AAKD,CAND;;AAQA,MAAMC,OAAiB,GAAIL,QAAD,IAAc;AACtCf,EAAAA,aAAa,CAACgB,gBAAd,CAA+Bd,QAA/B,EAA0CmB,OAAD,IAAqB;AAC5D,QAAIA,OAAJ,EAAa;AACXN,MAAAA,QAAQ,CAACM,OAAD,CAAR;AACD;AACF,GAJD;AAKD,CAND;;AAQA,SACEf,gBADF,EAEEM,KAFF,EAGEQ,OAHF,EAIEF,SAJF,EAKEJ,QALF,EAMET,eANF","sourcesContent":["import {\n  IConfigureHumanID,\n  ILogIn,\n  IOnCancel,\n  IOnError,\n  IOnSuccess\n} from './core/core.interface';\nimport {EventRegister, ON_CANCEL, ON_ERROR, ON_SUCCESS} from './core/eventManager';\nimport options from './core/options';\nimport HumanIDProvider from './core/Provider';\n\nconst configureHumanID: IConfigureHumanID = (params) => {\n  const {appName, clientId, clientSecret, Icon = null} = params;\n\n  options.appName = appName;\n  options.clientId = clientId;\n  options.clientSecret = clientSecret;\n  options.Icon = Icon;\n};\n\nconst logIn: ILogIn = () => {\n  HumanIDProvider.ref?.logIn();\n};\n\nconst onCancel: IOnCancel = (callback) => {\n  EventRegister.addEventListener(ON_CANCEL, (cancel: boolean) => {\n    if (cancel) {\n      callback();\n    }\n  });\n};\n\nconst onSuccess: IOnSuccess = (callback) => {\n  EventRegister.addEventListener(ON_SUCCESS, (exchangeToken: string) => {\n    if (exchangeToken) {\n      callback(exchangeToken);\n    }\n  });\n};\n\nconst onError: IOnError = (callback) => {\n  EventRegister.addEventListener(ON_ERROR, (message: string) => {\n    if (message) {\n      callback(message);\n    }\n  });\n};\n\nexport {\n  configureHumanID,\n  logIn,\n  onError,\n  onSuccess,\n  onCancel,\n  HumanIDProvider\n};\n"]}