{"version":3,"sources":["eventManager.ts"],"names":["EventRegister","addEventListener","eventName","callback","length","_Listeners","count","eventId","refs","name","removeEventListener","id","removeAllListeners","removeError","Object","keys","forEach","_id","removed","emitEvent","data","on","rm","rmAll","emit","ON_CANCEL","ON_SUCCESS","ON_ERROR"],"mappings":";;AAKA,MAAMA,aAAN,CAAoB;AAMlB,SAAOC,gBAAP,CACEC,SADF,EAEEC,QAFF,EAGE;AACA,QAAID,SAAS,SAAT,IAAAA,SAAS,WAAT,IAAAA,SAAS,CAAEE,MAAX,IAAqB,OAAOD,QAAP,KAAoB,UAA7C,EAAyD;AACvDH,MAAAA,aAAa,CAACK,UAAd,CAAyBC,KAAzB;AACA,YAAMC,OAAO,GAAG,MAAMP,aAAa,CAACK,UAAd,CAAyBC,KAA/C;AAEAN,MAAAA,aAAa,CAACK,UAAd,CAAyBG,IAAzB,CAA8BD,OAA9B,IAAyC;AACvCE,QAAAA,IAAI,EAAEP,SADiC;AAEvCC,QAAAA;AAFuC,OAAzC;AAIA,aAAOI,OAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAED,SAAOG,mBAAP,CAA2BC,EAA3B,EAAuC;AACrC,QAAIA,EAAJ,aAAIA,EAAJ,eAAIA,EAAE,CAAEP,MAAR,EAAgB;AACd,aAAO,OAAOJ,aAAa,CAACK,UAAd,CAAyBG,IAAzB,CAA8BG,EAA9B,CAAd;AACD;;AACD,WAAO,KAAP;AACD;;AAED,SAAOC,kBAAP,GAA4B;AAC1B,QAAIC,WAAW,GAAG,KAAlB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYf,aAAa,CAACK,UAAd,CAAyBG,IAArC,EAA2CQ,OAA3C,CAAoDC,GAAD,IAAS;AAC1D,YAAMC,OAAO,GAAG,OAAOlB,aAAa,CAACK,UAAd,CAAyBG,IAAzB,CAA8BS,GAA9B,CAAvB;AACAJ,MAAAA,WAAW,GAAG,CAACA,WAAD,GAAe,CAACK,OAAhB,GAA0BL,WAAxC;AACD,KAHD;AAIA,WAAO,CAACA,WAAR;AACD;;AAED,SAAOM,SAAP,CAAiBjB,SAAjB,EAAoCkB,IAApC,EAA+C;AAC7CN,IAAAA,MAAM,CAACC,IAAP,CAAYf,aAAa,CAACK,UAAd,CAAyBG,IAArC,EAA2CQ,OAA3C,CAAoDC,GAAD,IAAS;AAC1D,UACEjB,aAAa,CAACK,UAAd,CAAyBG,IAAzB,CAA8BS,GAA9B,KACAf,SAAS,KAAKF,aAAa,CAACK,UAAd,CAAyBG,IAAzB,CAA8BS,GAA9B,EAAmCR,IAFnD,EAGE;AACAT,QAAAA,aAAa,CAACK,UAAd,CAAyBG,IAAzB,CAA8BS,GAA9B,EAAmCd,QAAnC,CAA4CiB,IAA5C;AACD;AACF,KAPD;AAQD;AAED;AACF;AACA;;;AACE,SAAOC,EAAP,CAAUnB,SAAV,EAA6BC,QAA7B,EAAkE;AAChE,WAAOH,aAAa,CAACC,gBAAd,CAA+BC,SAA/B,EAA0CC,QAA1C,CAAP;AACD;;AAED,SAAOmB,EAAP,CAAUpB,SAAV,EAA6B;AAC3B,WAAOF,aAAa,CAACU,mBAAd,CAAkCR,SAAlC,CAAP;AACD;;AAED,SAAOqB,KAAP,GAAe;AACb,WAAOvB,aAAa,CAACY,kBAAd,EAAP;AACD;;AAED,SAAOY,IAAP,CAAYtB,SAAZ,EAA+BkB,IAA/B,EAA0C;AACxCpB,IAAAA,aAAa,CAACmB,SAAd,CAAwBjB,SAAxB,EAAmCkB,IAAnC;AACD;;AAnEiB;;gBAAdpB,a,gBAC2B;AAC7BM,EAAAA,KAAK,EAAE,CADsB;AAE7BE,EAAAA,IAAI,EAAE;AAFuB,C;;AAqEjC,MAAMiB,SAAS,GAAG,UAAlB;AACA,MAAMC,UAAU,GAAG,WAAnB;AACA,MAAMC,QAAQ,GAAG,SAAjB;AAEA,SAAQ3B,aAAR,EAAuByB,SAAvB,EAAkCC,UAAlC,EAA8CC,QAA9C","sourcesContent":["interface Listeners {\n  count: number;\n  refs: Record<string, any>;\n}\n\nclass EventRegister {\n  static _Listeners: Listeners = {\n    count: 0,\n    refs: {}\n  };\n\n  static addEventListener(\n    eventName: string,\n    callback: (parameter?: any) => void\n  ) {\n    if (eventName?.length && typeof callback === 'function') {\n      EventRegister._Listeners.count++;\n      const eventId = 'l' + EventRegister._Listeners.count;\n\n      EventRegister._Listeners.refs[eventId] = {\n        name: eventName,\n        callback\n      };\n      return eventId;\n    }\n    return false;\n  }\n\n  static removeEventListener(id: string) {\n    if (id?.length) {\n      return delete EventRegister._Listeners.refs[id];\n    }\n    return false;\n  }\n\n  static removeAllListeners() {\n    let removeError = false;\n    Object.keys(EventRegister._Listeners.refs).forEach((_id) => {\n      const removed = delete EventRegister._Listeners.refs[_id];\n      removeError = !removeError ? !removed : removeError;\n    });\n    return !removeError;\n  }\n\n  static emitEvent(eventName: string, data: any) {\n    Object.keys(EventRegister._Listeners.refs).forEach((_id) => {\n      if (\n        EventRegister._Listeners.refs[_id] &&\n        eventName === EventRegister._Listeners.refs[_id].name\n      ) {\n        EventRegister._Listeners.refs[_id].callback(data);\n      }\n    });\n  }\n\n  /*\n   * shortener\n   */\n  static on(eventName: string, callback: (parameter?: any) => void) {\n    return EventRegister.addEventListener(eventName, callback);\n  }\n\n  static rm(eventName: string) {\n    return EventRegister.removeEventListener(eventName);\n  }\n\n  static rmAll() {\n    return EventRegister.removeAllListeners();\n  }\n\n  static emit(eventName: string, data: any) {\n    EventRegister.emitEvent(eventName, data);\n  }\n}\n\nconst ON_CANCEL = 'onCancel';\nconst ON_SUCCESS = 'onSuccess';\nconst ON_ERROR = 'onError';\n\nexport {EventRegister, ON_CANCEL, ON_SUCCESS, ON_ERROR};\n"]}