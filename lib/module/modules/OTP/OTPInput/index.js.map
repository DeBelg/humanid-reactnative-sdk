{"version":3,"sources":["index.tsx"],"names":["React","Component","View","TextInput","TouchableWithoutFeedback","Keyboard","styles","OTPInputView","constructor","props","autoFocusOnLoad","pinCount","digits","getDigits","focusIndex","length","focusField","innerDigits","state","blurAllFields","code","join","onCodeChanged","index","text","onCodeFilled","newdigits","slice","oldTextLength","newTextLength","split","setState","notifyCodeChanged","forEach","value","result","key","handleChangeText","fields","focus","selectedIndex","field","blur","clearInputs","_","codeInputFieldStyle","codeInputHighlightStyle","secureTextEntry","editable","keyboardType","selectionColor","keyboardAppearance","defaultTextFieldStyle","placeholderCharacter","placeholderTextColor","color","defaultPlaceholderTextColor","ref","nativeEvent","handleKeyPressTextInput","array","Array","fill","map","renderOneInputField","componentDidMount","setTimeout","bringUpKeyBoardIfNeeded","keyboardDidHideListener","addListener","handleKeyboardDidHide","componentWillUnmount","timer","clearInterval","remove","render","style","touchable","filledPinCount","filter","digit","undefined","Math","min","clearAllFields","containerTextField","renderTextFields"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {\n  View,\n  TextInput,\n  TouchableWithoutFeedback,\n  Keyboard,\n  EmitterSubscription\n} from 'react-native';\nimport styles from './styles';\nimport {InputProps, OTPInputViewState} from './OTPInput.interface';\n\nexport default class OTPInputView extends Component<\n  InputProps,\n  OTPInputViewState\n> {\n  static defaultProps: InputProps = {\n    pinCount: 6,\n    autoFocusOnLoad: true,\n    secureTextEntry: false,\n    editable: true,\n    keyboardAppearance: 'default',\n    keyboardType: 'number-pad',\n    clearInputs: false,\n    placeholderCharacter: '',\n    selectionColor: '#000'\n  };\n\n  private fields: TextInput[] | null[] = [];\n  private keyboardDidHideListener?: EmitterSubscription;\n  private timer?: number | undefined;\n\n  constructor(props: InputProps) {\n    super(props);\n    this.state = {\n      digits: [],\n      selectedIndex: props.autoFocusOnLoad ? 0 : -1\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.bringUpKeyBoardIfNeeded();\n    }, 300);\n    this.keyboardDidHideListener = Keyboard.addListener(\n      'keyboardDidHide',\n      this.handleKeyboardDidHide\n    );\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n\n    this.keyboardDidHideListener?.remove();\n  }\n\n  bringUpKeyBoardIfNeeded = () => {\n    const {autoFocusOnLoad, pinCount} = this.props;\n    const digits = this.getDigits();\n    const focusIndex = digits.length ? digits.length - 1 : 0;\n    if (focusIndex < pinCount && autoFocusOnLoad) {\n      this.focusField(focusIndex);\n    }\n  };\n\n  getDigits = () => {\n    const {digits: innerDigits} = this.state;\n    return innerDigits;\n  };\n\n  private handleKeyboardDidHide = () => {\n    this.blurAllFields();\n  };\n\n  private notifyCodeChanged = () => {\n    const {digits} = this.state;\n    const code = digits.join('');\n    const {onCodeChanged} = this.props;\n    if (onCodeChanged) {\n      onCodeChanged(code);\n    }\n  };\n\n  private handleChangeText = (index: number, text: string) => {\n    const {onCodeFilled, pinCount} = this.props;\n    const digits = this.getDigits();\n    let newdigits = digits.slice();\n    const oldTextLength = newdigits[index] ? newdigits[index].length : 0;\n    const newTextLength = text.length;\n    if (newTextLength - oldTextLength === pinCount) {\n      // user pasted text in.\n      newdigits = text.split('').slice(oldTextLength, newTextLength);\n      this.setState({digits: newdigits}, this.notifyCodeChanged);\n    } else {\n      if (text.length === 0) {\n        if (newdigits.length > 0) {\n          newdigits = newdigits.slice(0, newdigits.length - 1);\n        }\n      } else {\n        text.split('').forEach((value) => {\n          if (index < pinCount) {\n            newdigits[index] = value;\n            index += 1;\n          }\n        });\n        index -= 1;\n      }\n      this.setState({digits: newdigits}, this.notifyCodeChanged);\n    }\n\n    let result = newdigits.join('');\n    if (result.length >= pinCount) {\n      onCodeFilled && onCodeFilled(result);\n      this.focusField(pinCount - 1);\n      this.blurAllFields();\n    } else {\n      if (text.length > 0 && index < pinCount - 1) {\n        this.focusField(index + 1);\n      }\n    }\n  };\n\n  private handleKeyPressTextInput = (index: number, key: string) => {\n    const digits = this.getDigits();\n    if (key === 'Backspace') {\n      if (!digits[index] && index > 0) {\n        this.handleChangeText(index - 1, '');\n        this.focusField(index - 1);\n      }\n    }\n  };\n\n  focusField = (index: number) => {\n    if (index < this.fields.length) {\n      (this.fields[index] as TextInput).focus();\n      this.setState({\n        selectedIndex: index\n      });\n    }\n  };\n\n  blurAllFields = () => {\n    this.fields.forEach((field: TextInput | null) =>\n      (field as TextInput).blur()\n    );\n    this.setState({\n      selectedIndex: -1\n    });\n  };\n\n  clearAllFields = () => {\n    const {clearInputs} = this.props;\n    if (clearInputs) {\n      this.setState({digits: [], selectedIndex: 0});\n    }\n  };\n\n  renderOneInputField = (_: TextInput, index: number) => {\n    const {\n      codeInputFieldStyle,\n      codeInputHighlightStyle,\n      secureTextEntry,\n      editable,\n      keyboardType,\n      selectionColor,\n      keyboardAppearance\n    } = this.props;\n    const {defaultTextFieldStyle} = styles;\n    const {digits} = this.state;\n    const {\n      clearInputs,\n      placeholderCharacter,\n      placeholderTextColor\n    } = this.props;\n    const {color: defaultPlaceholderTextColor} = {\n      ...defaultTextFieldStyle,\n      ...codeInputFieldStyle\n    };\n    return (\n      <View pointerEvents=\"none\" key={index + 'view'} testID=\"inputSlotView\">\n        <TextInput\n          testID=\"textInput\"\n          underlineColorAndroid=\"rgba(0,0,0,0)\"\n          style={[\n            defaultTextFieldStyle,\n            digits?.[index] ? codeInputHighlightStyle  : codeInputFieldStyle\n          ]}\n          ref={(ref) => {\n            this.fields[index] = ref;\n          }}\n          onChangeText={(text) => {\n            this.handleChangeText(index, text);\n          }}\n          onKeyPress={({nativeEvent: {key}}) => {\n            this.handleKeyPressTextInput(index, key);\n          }}\n          value={!clearInputs ? digits[index] : ''}\n          keyboardAppearance={keyboardAppearance}\n          keyboardType={keyboardType}\n          textContentType=\"none\"\n          key={index}\n          selectionColor={selectionColor}\n          secureTextEntry={secureTextEntry}\n          editable={editable}\n          placeholder={placeholderCharacter}\n          placeholderTextColor={\n            placeholderTextColor || defaultPlaceholderTextColor\n          }\n        />\n      </View>\n    );\n  };\n\n  renderTextFields = () => {\n    const {pinCount} = this.props;\n    const array = new Array(pinCount).fill(0);\n    return array.map(this.renderOneInputField);\n  };\n\n  render() {\n    const {pinCount, style, clearInputs} = this.props;\n    const digits = this.getDigits();\n    return (\n      <View testID=\"OTPInputView\" style={style}>\n        <TouchableWithoutFeedback\n          style={styles.touchable}\n          onPress={() => {\n            if (!clearInputs) {\n              let filledPinCount = digits.filter((digit) => {\n                return digit !== null && digit !== undefined;\n              }).length;\n              this.focusField(Math.min(filledPinCount, pinCount - 1));\n            } else {\n              this.clearAllFields();\n              this.focusField(0);\n            }\n          }}>\n          <View style={styles.containerTextField}>\n            {this.renderTextFields()}\n          </View>\n        </TouchableWithoutFeedback>\n      </View>\n    );\n  }\n}\n"]}