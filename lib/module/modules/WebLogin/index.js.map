{"version":3,"sources":["index.tsx"],"names":["React","useContext","useState","View","Modal","styles","ModalLoading","Context","WebView","EventRegister","ON_CANCEL","ON_ERROR","ON_SUCCESS","WebLogin","webLoginModalVisible","setWebLoginModalVisible","clearState","resetReducer","webLoginUrl","handleOnCancel","emitEvent","isLoading","setLoading","handleEventFromWebLogin","url","includes","exchangeToken","split","modal","container","toolbar","flex","uri","syntheticEvent","nativeEvent"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAAQC,IAAR,EAAcC,KAAd,QAA0B,cAA1B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SACEC,aADF,EAEEC,SAFF,EAGEC,QAHF,EAIEC,UAJF,QAKO,yBALP;;AAOA,SAASC,QAAT,GAAiC;AAC/B,QAAM;AACJC,IAAAA,oBADI;AAEJC,IAAAA,uBAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA;AALI,MAMFjB,UAAU,CAACM,OAAD,CANd;;AAQA,QAAMY,cAAc,GAAG,MAAM;AAC3BV,IAAAA,aAAa,CAACW,SAAd,CAAwBV,SAAxB,EAAmC,IAAnC;AACAO,IAAAA,YAAY;AACZD,IAAAA,UAAU;AACX,GAJD;;AAMA,QAAM,CAACK,SAAD,EAAYC,UAAZ,IAA0BpB,QAAQ,CAAC,IAAD,CAAxC;;AAEA,QAAMqB,uBAAuB,GAAIC,GAAD,IAAiB;AAC/C,QAAIA,GAAG,CAACC,QAAJ,CAAa,QAAb,CAAJ,EAA4B;AAC1BhB,MAAAA,aAAa,CAACW,SAAd,CAAwBT,QAAxB,EAAkC,cAAlC;AACAI,MAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACD;;AACD,QAAIS,GAAG,CAACC,QAAJ,CAAa,UAAb,CAAJ,EAA8B;AAC5B,UAAIC,aAAa,GAAGF,GAAG,CAACG,KAAJ,CAAU,KAAV,EAAiB,CAAjB,CAApB;AACAlB,MAAAA,aAAa,CAACW,SAAd,CAAwBR,UAAxB,EAAoCc,aAApC;AACAX,MAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACD;;AACD,QAAIS,GAAG,CAACC,QAAJ,CAAa,UAAb,CAAJ,EAA8B;AAC5BhB,MAAAA,aAAa,CAACW,SAAd,CAAwBT,QAAxB,EAAkCa,GAAlC;AACAT,MAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACD;;AACD,QAAIS,GAAG,CAACC,QAAJ,CAAa,MAAb,CAAJ,EAA0B;AACxBhB,MAAAA,aAAa,CAACW,SAAd,CAAwBV,SAAxB,EAAmC,EAAnC;AACAK,MAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACD;AACF,GAlBD;;AAoBA,sBACI,uDACE,oBAAC,KAAD;AACI,IAAA,KAAK,EAAEV,MAAM,CAACuB,KADlB;AAEI,IAAA,OAAO,EAAEd,oBAFb;AAGI,IAAA,cAAc,EAAEK;AAHpB,kBAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEd,MAAM,CAACwB;AAApB,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAExB,MAAM,CAACyB;AAApB,IADF,eAEE,oBAAC,OAAD;AACI,IAAA,KAAK,EAAE;AAACC,MAAAA,IAAI,EAAE;AAAP,KADX;AAEI,IAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEd;AADC,KAFZ;AAKI,IAAA,WAAW,EAAE,MAAM;AACjBI,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KAPL;AAQI,IAAA,SAAS,EAAEW,cAAc,IAAI;AAC3B,YAAM;AAACC,QAAAA;AAAD,UAAgBD,cAAtB;AACAV,MAAAA,uBAAuB,CAACW,WAAW,CAACV,GAAb,CAAvB;AACAF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AAZL,IAFF,eAgBE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAED;AAAvB,IAhBF,CAJF,CADF,CADJ;AA2BD;;AAED,eAAeR,QAAf","sourcesContent":["import React, {useContext, useState} from 'react';\nimport {View, Modal} from 'react-native';\nimport styles from './styles';\nimport ModalLoading from './ModalLoading';\nimport {Context} from '../../core/Context';\nimport WebView from 'react-native-webview';\nimport {\n  EventRegister,\n  ON_CANCEL,\n  ON_ERROR,\n  ON_SUCCESS,\n} from '../../core/eventManager';\n\nfunction WebLogin(): JSX.Element {\n  const {\n    webLoginModalVisible,\n    setWebLoginModalVisible,\n    clearState,\n    resetReducer,\n    webLoginUrl,\n  } = useContext(Context);\n\n  const handleOnCancel = () => {\n    EventRegister.emitEvent(ON_CANCEL, true);\n    resetReducer();\n    clearState();\n  };\n\n  const [isLoading, setLoading] = useState(true);\n\n  const handleEventFromWebLogin = (url: string) => {\n    if (url.includes('/error')) {\n      EventRegister.emitEvent(ON_ERROR, 'Login Failed');\n      setWebLoginModalVisible(false);\n    }\n    if (url.includes('/success')) {\n      let exchangeToken = url.split('et=')[1];\n      EventRegister.emitEvent(ON_SUCCESS, exchangeToken);\n      setWebLoginModalVisible(false);\n    }\n    if (url.includes('code=500')) {\n      EventRegister.emitEvent(ON_ERROR, url);\n      setWebLoginModalVisible(false);\n    }\n    if (url.includes('back')) {\n      EventRegister.emitEvent(ON_CANCEL, '');\n      setWebLoginModalVisible(false);\n    }\n  };\n\n  return (\n      <>\n        <Modal\n            style={styles.modal}\n            visible={webLoginModalVisible}\n            onRequestClose={handleOnCancel}>\n          <View style={styles.container}>\n            <View style={styles.toolbar} />\n            <WebView\n                style={{flex: 1}}\n                source={{\n                  uri: webLoginUrl,\n                }}\n                onLoadStart={() => {\n                  setLoading(true);\n                }}\n                onLoadEnd={syntheticEvent => {\n                  const {nativeEvent} = syntheticEvent;\n                  handleEventFromWebLogin(nativeEvent.url);\n                  setLoading(false);\n                }}\n            />\n            <ModalLoading visible={isLoading} />\n          </View>\n        </Modal>\n      </>\n  );\n}\n\nexport default WebLogin;\n"]}