{"version":3,"sources":["MainComponent.tsx"],"names":["React","useReducer","Context","checkClient","useGlobalState","rootReducer","rootState","loginAction","loginOTPAction","webLoginAction","WebLogin","EventRegister","ON_ERROR","options","MainComponent","_props","ref","state","dispatch","phoneNumber","setPhoneNumber","countryCode","setCountryCode","loginVisible","setLoginVisible","loginOTPVisible","setLoginOTPVisible","webLoginUrl","setWebLoginUrlToView","webLoginModalVisible","setWebLoginModalVisible","clearState","loginRequest","params","loginOTPRequest","webLoginRequest","getWebLogin","baseUrl","endPointUrl","response","fetch","method","headers","clientSecret","clientId","body","JSON","stringify","json","data","console","error","message","emitEvent","resetReducer","type","useImperativeHandle","logIn","lang","forwardRef"],"mappings":"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","sourcesContent":["import React, {useReducer} from 'react';\nimport {Context} from '../core/Context';\nimport {checkClient} from '../helpers';\nimport useGlobalState from '../core/useGlobalState';\nimport rootReducer from '../models/rootReducer';\nimport rootState from '../models/rootState';\nimport {LoginOTPRequest, LoginRequest, WebLoginRequest} from '../models/models.interface';\nimport {loginAction} from '../models/loginModel';\nimport {loginOTPAction} from '../models/loginOTPModel';\nimport {IMainComponent} from '../core/core.interface';\nimport {webLoginAction} from \"../models/webLoginModel\";\nimport WebLogin from \"./WebLogin\";\nimport {EventRegister, ON_ERROR} from \"../core/eventManager\";\nimport options from \"../core/options\";\n\nconst MainComponent: IMainComponent = (_props, ref): React.ReactElement => {\n    checkClient();\n\n    const [state, dispatch] = useReducer(rootReducer, rootState);\n    const {\n        phoneNumber,\n        setPhoneNumber,\n        countryCode,\n        setCountryCode,\n        loginVisible,\n        setLoginVisible,\n        loginOTPVisible,\n        setLoginOTPVisible,\n        webLoginUrl,\n        setWebLoginUrlToView,\n        webLoginModalVisible,\n        setWebLoginModalVisible,\n        clearState\n    } = useGlobalState();\n\n    const loginRequest = async (params: LoginRequest) => {\n        await loginAction.loginRequest(dispatch, params);\n    };\n\n    const loginOTPRequest = async (params: LoginOTPRequest) => {\n        await loginOTPAction.loginOTPRequest(dispatch, params);\n    };\n\n    const webLoginRequest = async (params: WebLoginRequest) => {\n        await webLoginAction.webLoginRequest(dispatch, params);\n    };\n\n    const getWebLogin = async (params: WebLoginRequest) => {\n        try {\n            setWebLoginModalVisible(true);\n            let baseUrl = 'https://api.human-id.org/v1/';\n            let endPointUrl = 'mobile/users/web-login';\n            const response = await fetch(baseUrl + endPointUrl, {\n                method: 'POST',\n                headers: {\n                    'content-type': 'application/json',\n                    'client-secret': options.clientSecret,\n                    'client-id': options.clientId,\n                },\n                body: JSON.stringify(params),\n            });\n            const json = await response.json();\n            if (json.data != null) {\n                setWebLoginUrlToView(json.data.webLoginUrl);\n            } else {\n                setWebLoginModalVisible(false);\n                console.error(json.message);\n                EventRegister.emitEvent(ON_ERROR, json.message);\n            }\n        } catch (error) {\n            setWebLoginModalVisible(false);\n            EventRegister.emitEvent(ON_ERROR, 'Login Failed');\n        }\n    };\n\n    const resetReducer = () => {\n        dispatch({\n            type: \"RESET\"\n        });\n    };\n\n    React.useImperativeHandle(ref, () => ({\n        logIn: () => getWebLogin({\n            lang: 'en'\n        })\n    }));\n\n    return (\n        <Context.Provider\n            value={{\n                state,\n                loginRequest,\n                loginOTPRequest,\n                webLoginRequest,\n                resetReducer,\n                phoneNumber,\n                setPhoneNumber,\n                countryCode,\n                setCountryCode,\n                loginVisible,\n                setLoginVisible,\n                loginOTPVisible,\n                setLoginOTPVisible,\n                webLoginModalVisible,\n                setWebLoginModalVisible,\n                webLoginUrl,\n                setWebLoginUrlToView,\n                clearState\n            }}>\n            <WebLogin />\n        </Context.Provider>\n    );\n};\n\nexport default React.forwardRef(MainComponent);\n"]}