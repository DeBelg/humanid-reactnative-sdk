{"version":3,"sources":["index.tsx"],"names":["React","useContext","View","Text","Image","TouchableOpacity","FlatList","Modal","flags","images","SearchCountryInput","FlatListSeparator","CountryPickerEmpty","styles","Context","getDialCode","countries","require","arrCountry","Object","keys","map","key","Index","props","onSelected","onCountryPickerShow","countryCode","visible","setVisible","useState","setCountries","resetCountries","toggleModal","handleOnSelected","useCallback","item","handleOnCountryChange","country","length","filterCountries","filter","filtered","name","includes","keyExtractor","renderItem","imageSource","iso2","itemFlag","iconFlag","countryText","countryCodeText","dialCode","containerInputCountryCode","placeholderCountryCode","arrowDown","modalCountryPicker","memo"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react';\nimport {View, Text, Image, TouchableOpacity, FlatList} from 'react-native';\nimport Modal from 'react-native-modal';\nimport {flags, images} from '../../../themes';\nimport SearchCountryInput from './SearchCountryInput';\nimport FlatListSeparator from './FlatListSeparator';\nimport CountryPickerEmpty from './CountryPickerEmpty';\nimport {\n  Countries,\n  Country,\n  CountryPickerProps,\n  FlagType\n} from '../Login.interface';\nimport styles from '../styles';\nimport {Context} from '../../../core/Context';\nimport {getDialCode} from '../../../helpers';\n\nconst countries: Countries = require('../../../../assets/json/countries.json');\n\nconst arrCountry = Object.keys(countries).map((key) => {\n  return countries[key as FlagType];\n});\n\nfunction Index(props: CountryPickerProps) {\n  const {onSelected, onCountryPickerShow} = props;\n\n  const {countryCode} = useContext(Context);\n  const [visible, setVisible] = React.useState(false);\n  const [countries, setCountries] = React.useState(arrCountry);\n\n  const resetCountries = () => {\n    setCountries(arrCountry);\n  };\n\n  const toggleModal = () => {\n    setVisible(!visible);\n  };\n\n  // @ts-ignore\n  const handleOnSelected = React.useCallback((item: Country) => {\n      toggleModal();\n      onSelected(item);\n  });\n\n  const handleOnCountryChange = React.useCallback((country: string) => {\n    if (!country.length) {\n      setCountries(arrCountry);\n    } else {\n      const filterCountries = countries.filter(\n        (filtered) => filtered.name.includes(country)\n      );\n\n      setCountries(filterCountries);\n    }\n  }, [])\n\n  const keyExtractor = (item: Country) => item.name;\n\n  const renderItem = ({item}: {item: Country}) => {\n    const imageSource = flags[item.iso2];\n\n    return (\n      <TouchableOpacity\n        activeOpacity={0.3}\n        onPress={() => handleOnSelected(item)}>\n        <View style={styles.itemFlag}>\n          <Image\n            source={imageSource}\n            style={styles.iconFlag}\n            resizeMode=\"contain\"\n          />\n          <Text style={styles.countryText}>{item.name}</Text>\n          <Text style={styles.countryCodeText}>{`+${item.dialCode}`}</Text>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <>\n      <TouchableOpacity activeOpacity={0.3} onPress={toggleModal}>\n        <View style={styles.containerInputCountryCode}>\n          <Image\n            source={flags[countryCode]}\n            resizeMode=\"contain\"\n            style={styles.iconFlag}\n          />\n          <Text style={styles.placeholderCountryCode}>\n            {`+${getDialCode(countryCode)}`}\n          </Text>\n          <Image source={images.arrowDown} style={styles.arrowDown} />\n        </View>\n      </TouchableOpacity>\n      <Modal\n        useNativeDriver={true}\n        hideModalContentWhileAnimating={true}\n        isVisible={visible}\n        coverScreen={true}\n        style={styles.modalCountryPicker}\n        onModalHide={resetCountries}\n        onModalShow={onCountryPickerShow}\n        onBackButtonPress={toggleModal}\n      >\n        <View>\n          <SearchCountryInput\n            onChangeText={handleOnCountryChange}\n            onCancel={toggleModal}\n          />\n            <FlatList\n              keyExtractor={keyExtractor}\n              data={countries}\n              renderItem={renderItem}\n              scrollEnabled={true}\n              showsVerticalScrollIndicator={false}\n              maxToRenderPerBatch={15}\n              ItemSeparatorComponent={FlatListSeparator}\n              ListEmptyComponent={CountryPickerEmpty}\n              keyboardShouldPersistTaps=\"handled\"\n            />\n        </View>\n      </Modal>\n    </>\n  );\n}\n\nexport default React.memo(Index);\n"]}