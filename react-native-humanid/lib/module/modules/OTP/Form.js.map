{"version":3,"sources":["Form.tsx"],"names":["React","useContext","useEffect","useRef","useState","OTPInputView","View","Text","ActivityIndicator","styles","Context","getDialCode","otpTimerFormat","getUniqueId","EventRegister","ON_SUCCESS","colors","Form","state","loginRequest","loginOTPRequest","phoneNumber","countryCode","clearState","resetReducer","otpRef","timerRef","timer","setTimer","loginOTPPayload","data","config","nextResendDelay","clearTimer","clearTimeout","current","countdown","setTimeout","loginPayload","success","exchangeToken","emitEvent","handleOnCodeFilled","code","phone","verificationCode","deviceId","handleResendCode","formContainer","otpView","otpFieldStyle","otpHighlightStyle","loginFetching","loginOTPFetching","resendActivity","primary","resendCode"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useRef, useState} from 'react';\nimport OTPInputView from './OTPInput';\nimport {View, Text, ActivityIndicator} from 'react-native';\nimport styles from './styles';\nimport {Context} from '../../core/Context';\nimport {getDialCode, otpTimerFormat} from '../../helpers';\nimport {getUniqueId} from 'react-native-device-info';\nimport {EventRegister, ON_SUCCESS} from '../../core/eventManager';\nimport {colors} from '../../themes';\n\nfunction Form(): JSX.Element {\n  const {\n    state,\n    loginRequest,\n    loginOTPRequest,\n    phoneNumber,\n    countryCode,\n    clearState,\n    resetReducer\n  } = useContext(Context);\n\n  const otpRef = useRef<OTPInputView>(null);\n\n  const timerRef = useRef<NodeJS.Timeout>();\n\n  const [timer, setTimer] = useState(\n    state.loginOTPPayload?.data?.config?.nextResendDelay ?? 60\n  );\n\n  const clearTimer = () => clearTimeout(timerRef.current!);\n\n  useEffect(() => {\n    return () => clearTimer();\n  }, []);\n\n  useEffect(() => {\n    if (timer === 0) {\n      return;\n    }\n\n    function countdown() {\n      setTimer(timer - 1);\n    }\n\n    timerRef.current = setTimeout(countdown, 1000);\n\n    return () => clearTimer();\n  }, [timer]);\n\n  useEffect(() => {\n    if (timer === 0) {\n      setTimer(state.loginOTPPayload?.data?.config?.nextResendDelay ?? 60);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.loginOTPPayload]);\n\n  useEffect(() => {\n    if (state.loginPayload?.success) {\n      const {exchangeToken} = state.loginPayload.data;\n      EventRegister.emitEvent(ON_SUCCESS, exchangeToken);\n      clearState();\n      resetReducer();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.loginPayload]);\n\n  const handleOnCodeFilled = (code: string) => {\n    loginRequest({\n      phone: phoneNumber,\n      countryCode: getDialCode(countryCode),\n      verificationCode: code,\n      deviceId: getUniqueId()\n    });\n  };\n\n  const handleResendCode = () => {\n    loginOTPRequest({\n      phone: phoneNumber,\n      countryCode: getDialCode(countryCode)\n    });\n  };\n\n  return (\n    <View style={styles.formContainer}>\n      <OTPInputView\n        ref={otpRef}\n        pinCount={4}\n        style={styles.otpView}\n        codeInputFieldStyle={styles.otpFieldStyle}\n        codeInputHighlightStyle={styles.otpHighlightStyle}\n        keyboardType=\"phone-pad\"\n        autoFocusOnLoad={true}\n        onCodeFilled={handleOnCodeFilled}\n        editable={!state.loginFetching}\n      />\n      {state.loginOTPFetching ? (\n        <ActivityIndicator style={styles.resendActivity} size=\"small\" color={colors.primary} />\n      ) : (\n        <Text\n          style={styles.resendCode}\n          onPress={timer === 0 ? handleResendCode : () => null}>\n          {timer !== 0\n            ? `Resend code in ${otpTimerFormat(timer)}`\n            : 'Click here to resend code'}\n        </Text>\n      )}\n    </View>\n  );\n}\n\nexport default Form;\n"]}