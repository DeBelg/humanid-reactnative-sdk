{"version":3,"sources":["Form.tsx"],"names":["React","useContext","useEffect","useRef","Keyboard","TextInput","View","InteractionManager","CountryPicker","Button","styles","colors","Context","getCountry","getDialCode","Form","state","phoneNumber","setPhoneNumber","setLoginOTPVisible","loginVisible","setCountryCode","countryCode","loginOTPRequest","inputRef","focusPhoneNumber","removeListener","keyboardDidHide","loginOTPPayload","success","current","setNativeProps","style","length","phoneOnTyping","placeholder","runAfterInteractions","setTimeout","focus","blur","handleChangeText","text","isNaN","Number","handleCountrySelected","item","dismiss","iso2","handleSubmit","phone","isSubmitEnabled","phoneNumberLib","require","phoneUtil","PhoneNumberUtil","getInstance","currentCountry","phoneInfo","parse","isValidNumber","containerForm","textInput","gray"],"mappings":"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","sourcesContent":["import React, {RefObject, useContext, useEffect, useRef} from 'react';\nimport {Keyboard, TextInput, View, InteractionManager} from 'react-native';\nimport CountryPicker from './CountryPicker';\nimport Button from './Button';\nimport styles from './styles';\nimport {colors} from '../../themes';\nimport {Context} from '../../core/Context';\nimport {Country} from './Login.interface';\nimport {getCountry, getDialCode} from '../../helpers';\n\nfunction Form() {\n  const {\n    state,\n    phoneNumber,\n    setPhoneNumber,\n    setLoginOTPVisible,\n    loginVisible,\n    setCountryCode,\n    countryCode,\n    loginOTPRequest\n  } = useContext(Context);\n\n  const inputRef = useRef<TextInput>();\n\n  useEffect(() => {\n    /**\n     * Focus keyboard when mounting\n     */\n    focusPhoneNumber();\n\n    return () => {\n      Keyboard.removeListener('keyboardDidHide', keyboardDidHide);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (state.loginOTPPayload?.success) {\n      setLoginOTPVisible(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.loginOTPPayload]);\n\n  React.useEffect(() => {\n    inputRef.current?.setNativeProps({\n      style: phoneNumber?.length ? styles.phoneOnTyping : styles.placeholder\n    });\n  }, [phoneNumber])\n\n  const focusPhoneNumber = () => {\n    if (loginVisible) {\n      InteractionManager.runAfterInteractions(() => {\n        setTimeout(() => inputRef.current?.focus(), 100);\n      });\n    }\n  }\n\n  const keyboardDidHide = () => {\n    if (loginVisible) {\n      inputRef.current?.blur();\n    }\n  }\n\n  const handleChangeText = (text: string) => {\n    if (isNaN(Number(text))) {\n      return;\n    }\n\n    setPhoneNumber(text);\n  };\n\n  const handleCountrySelected = (item: Country) => {\n    setTimeout(() => {\n      Keyboard.dismiss();\n    }, 0)\n\n    setTimeout(() => {\n      setCountryCode(item.iso2);\n      focusPhoneNumber();\n    }, 100)\n  };\n\n  const handleSubmit = () => {\n    Keyboard.dismiss();\n\n    loginOTPRequest({\n      phone: phoneNumber,\n      countryCode: getDialCode(countryCode)\n    });\n  };\n\n  const isSubmitEnabled = (): boolean => {\n    if (phoneNumber.length >= 9) {\n      const phoneNumberLib = require('google-libphonenumber');\n      const phoneUtil = phoneNumberLib.PhoneNumberUtil.getInstance();\n\n      const currentCountry = getCountry(countryCode);\n      const iso2 = currentCountry?.iso2;\n\n      const phoneInfo = phoneUtil.parse(phoneNumber, iso2);\n\n      return phoneUtil.isValidNumber(phoneInfo);\n    }\n\n    return false;\n  };\n\n  return (\n    <View style={styles.containerForm}>\n      <CountryPicker\n        onSelected={handleCountrySelected}\n        onCountryPickerShow={keyboardDidHide}\n      />\n      <TextInput\n        ref={inputRef as RefObject<TextInput>}\n        style={styles.textInput}\n        keyboardType=\"phone-pad\"\n        onChangeText={handleChangeText}\n        value={phoneNumber}\n        placeholder=\"Phone Number\"\n        maxLength={15}\n        selectionColor={colors.gray}\n        placeholderTextColor={colors.placeholder}\n      />\n      <Button enabled={isSubmitEnabled()} onPress={handleSubmit} />\n    </View>\n  );\n}\n\nexport default Form;\n"]}